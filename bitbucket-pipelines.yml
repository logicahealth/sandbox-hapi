# This project uses the GitFlow Workflow as defined here:
#   https://www.atlassian.com/git/tutorials/comparing-workflows#GitFlow-workflow
image: hspconsortium/hspc-ubuntu-base
clone:           # the 'clone' section
  depth: 1       # the depth, in this case the clone will contain last one commits

pipelines:
  default:
    - step:
        script:
          - echo "Please use a GitFlow branch"
          - exit 1;
  branches:
    develop:
      - step:
          name: build jar and upload to nexus
          caches:
            - maven
          script:
            - mvn -V -B -s settings.xml deploy -P DEPLOY-HSPC,hspc-nexus
            # clear out the other jar files
            - rm reference-api-webapp-multitenant/target/*-sources.jar
            - rm reference-api-webapp-multitenant/target/*-javadoc.jar
            # get the ci scripts
            - git clone https://bitbucket.org/hspconsortium/sandbox-ci.git
            # build the set-env.sh script
            - . sandbox-ci/bitbucket-pipeline-scripts/build-set-env-for-maven.sh test 8070 1000 reference-api-webapp-multitenant
          artifacts:
            - set-env.sh
            - reference-api-webapp-multitenant/target/*.jar
      - step:
          name: build docker and upload to docker hub
          script:
            - . set-env.sh
            - echo $IMAGE_COORDINATES
            # build docker image and push
            - docker login -u $DOCKER_ID -p $DOCKER_PASSWORD
            - docker build -t $IMAGE_COORDINATES .
            - docker push $IMAGE_COORDINATES
      - step:
          name: AUTOMATICALLY update the aws test service
          script:
            - . set-env.sh
            # get the ci scripts
            - git clone https://bitbucket.org/hspconsortium/sandbox-ci.git
            - # DSTU2
            # override the container name
            - export AWS_CONTAINER_NAME=hspc-reference-api-parent-dstu2
            # override the service name
            - export AWS_SERVICE_NAME=hspc-reference-api-dstu2-service
            # build the container-definition.json
            - . sandbox-ci/bitbucket-pipeline-scripts/build-container-definition.sh $ENC_PW_TEST
            # register the ECS task definition and capture the version
            - export TASK_VERSION=$(aws ecs register-task-definition --family "$AWS_CONTAINER_NAME" --container-definitions $(cat sandbox-ci/bitbucket-pipeline-scripts/container-definitions.json | jq -c '.')  | jq --raw-output '.taskDefinition.revision')
            - echo "Registered ECS Task Definition - $AWS_CONTAINER_NAME:$TASK_VERSION"
            # update the service to use the latest task definition
            - aws ecs update-service --cluster hspc-test --service "$AWS_SERVICE_NAME" --task-definition $AWS_CONTAINER_NAME:$TASK_VERSION
            # STU3
            # override the container name
            - export AWS_CONTAINER_NAME=hspc-reference-api-parent-stu3
            # override the service name
            - export AWS_SERVICE_NAME=hspc-reference-api-stu3-service
            # build the container-definition.json
            - . sandbox-ci/bitbucket-pipeline-scripts/build-container-definition.sh $ENC_PW_TEST
            # register the ECS task definition and capture the version
            - export TASK_VERSION=$(aws ecs register-task-definition --family "$AWS_CONTAINER_NAME" --container-definitions $(cat sandbox-ci/bitbucket-pipeline-scripts/container-definitions.json | jq -c '.')  | jq --raw-output '.taskDefinition.revision')
            - echo "Registered ECS Task Definition - $AWS_CONTAINER_NAME:$TASK_VERSION"
            # update the service to use the latest task definition
            - aws ecs update-service --cluster hspc-test --service "$AWS_SERVICE_NAME" --task-definition $AWS_CONTAINER_NAME:$TASK_VERSION
    master:
      - step:
          name: build jar and upload to nexus
          caches:
            - maven
          script:
            # Deploy to maven central
            - openssl aes-256-cbc -pass pass:$OPENSSL_PWD -in private-key.gpg.enc -out private-key.gpg -d
            - gpg --batch --import private-key.gpg
            - mvn -V -B -s settings.xml deploy -P DEPLOY,ossrh
            # clear out the other jar files
            - rm reference-api-webapp-multitenant/target/*-sources.jar
            - rm reference-api-webapp-multitenant/target/*-javadoc.jar
            # get the ci scripts
            - git clone https://bitbucket.org/hspconsortium/sandbox-ci.git
            # build the set-env.sh script
            - . sandbox-ci/bitbucket-pipeline-scripts/build-set-env-for-maven.sh prod 8070 1000 reference-api-webapp-multitenant
          artifacts:
            - set-env.sh
            - reference-api-webapp-multitenant/target/*.jar
      - step:
          name: build docker and upload to docker hub
          script:
            - . set-env.sh
            - echo $IMAGE_COORDINATES
            # build docker image and push
            - docker login -u $DOCKER_ID -p $DOCKER_PASSWORD
            - docker build -t $IMAGE_COORDINATES .
            - docker push $IMAGE_COORDINATES
      - step:
          name: MANUALLY update the aws prod service
          trigger: manual
          script:
            - . set-env.sh
            # get the ci scripts
            - git clone https://bitbucket.org/hspconsortium/sandbox-ci.git
            - # DSTU2
            # override the container name
            - export AWS_CONTAINER_NAME=hhspc-reference-api-parent-dstu2-prod
            # override the service name
            - export AWS_SERVICE_NAME=hspc-reference-api-parent-dstu2-prod-service
            # build the container-definition.json
            - . sandbox-ci/bitbucket-pipeline-scripts/build-container-definition.sh $ENC_PW_PROD
            # register the ECS task definition and capture the version
            - export TASK_VERSION=$(aws ecs register-task-definition --family "$AWS_CONTAINER_NAME" --container-definitions $(cat sandbox-ci/bitbucket-pipeline-scripts/container-definitions.json | jq -c '.')  | jq --raw-output '.taskDefinition.revision')
            - echo "Registered ECS Task Definition - $AWS_CONTAINER_NAME:$TASK_VERSION"
            # update the service to use the latest task definition
            - aws ecs update-service --cluster hspc-prod --service "$AWS_SERVICE_NAME" --task-definition $AWS_CONTAINER_NAME:$TASK_VERSION
            # STU3
            # override the container name
            - export AWS_CONTAINER_NAME=hspc-reference-api-parent-stu3-prod
            # override the service name
            - export AWS_SERVICE_NAME=hspc-reference-api-parent-stu3-prod-service
            # build the container-definition.json
            - . sandbox-ci/bitbucket-pipeline-scripts/build-container-definition.sh $ENC_PW_PROD
            # register the ECS task definition and capture the version
            - export TASK_VERSION=$(aws ecs register-task-definition --family "$AWS_CONTAINER_NAME" --container-definitions $(cat sandbox-ci/bitbucket-pipeline-scripts/container-definitions.json | jq -c '.')  | jq --raw-output '.taskDefinition.revision')
            - echo "Registered ECS Task Definition - $AWS_CONTAINER_NAME:$TASK_VERSION"
            # update the service to use the latest task definition
            - aws ecs update-service --cluster hspc-prod --service "$AWS_SERVICE_NAME" --task-definition $AWS_CONTAINER_NAME:$TASK_VERSION
    feature/*:
      - step:
          caches:
            - maven
          script:
            - mvn -B verify
    release/*:
      - step:
          caches:
            - maven
          script:
            - mvn -B verify
    hotfix/*:
      - step:
          caches:
            - maven
          script:
            - mvn -B verify
options:
  docker: true