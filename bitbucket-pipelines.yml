# This project uses the GitFlow Workflow as defined here:
#   https://www.atlassian.com/git/tutorials/comparing-workflows#GitFlow-workflow
image: interopion/ci-base-image:latest
clone:           # the 'clone' section
  depth: 1       # the depth, in this case the clone will contain last one commits

pipelines:
  default:
    - step:
        script:
          - echo "Please use a GitFlow branch"
          - exit 1;
  branches:
    develop:
      - step:
          name: build the source code
          caches:
            - maven
          script:
            - export TARGET_ENV=test
            - export CREDENTIALS=${ENC_PW_TEST}
            - cd ci
            # DSTU2
            - export FHIR_VERSION="dstu2"
            - . ci-0-set-properties.sh
            - if [[ ! ${PROJECT_VERSION} =~ ${VERSION_SNAPSHOT_REGEX} ]]; then echo "not a snapshot version"; exit 1; fi
            - . ci-1-prepare-sources.sh
            # STU3
            - export FHIR_VERSION="stu3"
            - export PROJECT_NAME="api-v8-stu3"
            - . ci-0-set-properties.sh
            - . ci-1-prepare-sources.sh
            # R4
            - export FHIR_VERSION="r4"
            - export PROJECT_NAME="api-v8-r4"
            - . ci-0-set-properties.sh
            - . ci-1-prepare-sources.sh
            - . ci-2-build-project.sh
          artifacts:
            - reference-api-webapp/target/*.jar
            - aws/task-definition-dstu2.json
            - aws/task-definition-stu3.json
            - aws/task-definition-r4.json
      - step:
          name: build docker and upload to docker hub
          script:
            - export TARGET_ENV=test
            - cd ci
            # DSTU2
            - export FHIR_VERSION="dstu2"
            - . ci-0-set-properties.sh
            - . ci-3-docker-image.sh
            # STU3
            - export FHIR_VERSION="stu3"
            - . ci-0-set-properties.sh
            - . ci-3-docker-image.sh
            # R4
            - export FHIR_VERSION="r4"
            - . ci-0-set-properties.sh
            - . ci-3-docker-image.sh
      - step:
          name: update the aws task definition
          script:
            - export TARGET_ENV=test
            - cd ci
            # DSTU2
            - export FHIR_VERSION="dstu2"
            - . ci-0-set-properties.sh
            - . ci-4-aws-task-update.sh
            # STU3
            - export FHIR_VERSION="stu3"
            - . ci-0-set-properties.sh
            - . ci-4-aws-task-update.sh
            # R4
            - export FHIR_VERSION="r4"
            - . ci-0-set-properties.sh
            - . ci-4-aws-task-update.sh
      - step:
          name: update the aws service
          deployment: test
          script:
            - export TARGET_ENV=test
            - cd ci
            # DSTU2
            - export FHIR_VERSION="dstu2"
            - . ci-0-set-properties.sh
            - . ci-5-aws-service-update.sh
            # STU3
            - export FHIR_VERSION="stu3"
            - . ci-0-set-properties.sh
            - . ci-5-aws-service-update.sh
            # R4
            - export FHIR_VERSION="r4"
            - . ci-0-set-properties.sh
            - . ci-5-aws-service-update.sh
    master:
      - step:
          name: build the source code
          caches:
            - maven
          script:
            - export TARGET_ENV=prod
            - export CREDENTIALS=${ENC_PW_PROD}
            - cd ci
            # DSTU2
            - export FHIR_VERSION="dstu2"
            - . ci-0-set-properties.sh
            - if [[ ! ${PROJECT_VERSION} =~ ${VERSION_RELEASE_REGEX} ]]; then echo "not a release version"; exit 1; fi
            - . ci-1-prepare-sources.sh
            # STU3
            - export FHIR_VERSION="stu3"
            - export PROJECT_NAME="api-v8-stu3"
            - . ci-0-set-properties.sh
            - . ci-1-prepare-sources.sh
            # R4
            - export FHIR_VERSION="r4"
            - export PROJECT_NAME="api-v8-r4"
            - . ci-0-set-properties.sh
            - . ci-1-prepare-sources.sh
            - . ci-2-build-project.sh
          artifacts:
            - reference-api-webapp/target/*.jar
            - aws/task-definition-dstu2.json
            - aws/task-definition-stu3.json
            - aws/task-definition-r4.json
      - step:
          name: build docker and upload to docker hub
          script:
            - export TARGET_ENV=prod
            - cd ci
            # DSTU2
            - export FHIR_VERSION="dstu2"
            - . ci-0-set-properties.sh
            - . ci-3-docker-image.sh
            # STU3
            - export FHIR_VERSION="stu3"
            - . ci-0-set-properties.sh
            - . ci-3-docker-image.sh
            # R4
            - export FHIR_VERSION="r4"
            - . ci-0-set-properties.sh
            - . ci-3-docker-image.sh
      - step:
          name: update the aws task definition
          script:
            - export TARGET_ENV=prod
            - cd ci
            # DSTU2
            - export FHIR_VERSION="dstu2"
            - . ci-0-set-properties.sh
            - . ci-4-aws-task-update.sh
            # STU3
            - export FHIR_VERSION="stu3"
            - . ci-0-set-properties.sh
            - . ci-4-aws-task-update.sh
            # R4
            - export FHIR_VERSION="r4"
            - . ci-0-set-properties.sh
            - . ci-4-aws-task-update.sh
      - step:
          name: update the aws service
          deployment: production
          trigger: manual
          script:
            - export TARGET_ENV=prod
            - cd ci
            # DSTU2
            - export FHIR_VERSION="dstu2"
            - . ci-0-set-properties.sh
            - . ci-5-aws-service-update.sh
            # STU3
            - export FHIR_VERSION="stu3"
            - . ci-0-set-properties.sh
            - . ci-5-aws-service-update.sh
            # R4
            - export FHIR_VERSION="r4"
            - . ci-0-set-properties.sh
            - . ci-5-aws-service-update.sh
    feature/*:
      - step:
          name: build the source code
          script:
            - echo "success"
    release/*:
      - step:
          name: build the source code
          script:
            - echo "success"
    hotfix/*:
      - step:
          name: build the source code
          script:
            - echo "success"
options:
  docker: true