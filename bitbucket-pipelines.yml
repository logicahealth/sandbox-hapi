# This project uses the GitFlow Workflow as defined here:
#   https://www.atlassian.com/git/tutorials/comparing-workflows#GitFlow-workflow
image: hspconsortium/hspc-ubuntu-base
clone:           # the 'clone' section
  depth: 1       # the depth, in this case the clone will contain last one commits

pipelines:
  default:
    - step:
        script:
          - echo "Please use a GitFlow branch"
          - exit 1;
  branches:
    develop:
      - step:
          name: build, test, deploy, docker package, aws deploy
          caches:
            - maven
            - resources
          script:
            # Deploy to hspc-nexus
            - mvn -V -B -s settings.xml deploy -P DEPLOY-HSPC,hspc-nexus
            # clear out the other jar files
            - rm reference-api-fhir/target/*-sources.jar
            - rm reference-api-fhir/target/*-javadoc.jar
            - rm reference-api-mysql/target/*-sources.jar
            - rm reference-api-mysql/target/*-javadoc.jar
            - rm reference-api-mysql-multitenant/target/*-sources.jar
            - rm reference-api-mysql-multitenant/target/*-javadoc.jar
            - rm reference-api-oauth2/target/*-sources.jar
            - rm reference-api-oauth2/target/*-javadoc.jar
            - rm reference-api-smart-support/target/*-sources.jar
            - rm reference-api-smart-support/target/*-javadoc.jar
            - rm reference-api-webapp/target/*-sources.jar
            - rm reference-api-webapp/target/*-javadoc.jar
            - rm reference-api-webapp-base/target/*-sources.jar
            - rm reference-api-webapp-base/target/*-javadoc.jar
            - rm reference-api-webapp-multitenant/target/*-sources.jar
            - rm reference-api-webapp-multitenant/target/*-javadoc.jar
            # build dynamic container-definitions
            - export CONTAINER_NAME=$(mvn -q -Dexec.executable="echo" -Dexec.args='${project.artifactId}' --non-recursive exec:exec)
            - export PROJECT_VERSION=$(mvn -q -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive exec:exec)
            - sed -i -e "s/{{CONTAINER_NAME}}/$CONTAINER_NAME/g" -e "s/{{PROJECT_VERSION}}/$PROJECT_VERSION/g" container-definitions_test_stu3.json
            - sed -i -e "s/{{CONTAINER_NAME}}/$CONTAINER_NAME/g" -e "s/{{PROJECT_VERSION}}/$PROJECT_VERSION/g" container-definitions_test_dstu2.json
            # build docker image and push to nexus.hspconsortium.com:18083 for dstu2 profile
            - export IMAGE_NAME=$(cat container-definitions_test_dstu2.json | jq --raw-output '.[0].image')
            - docker login -u $NEXUS_USR -p $NEXUS_PWD nexus.hspconsortium.org:18083
            - docker build -t $IMAGE_NAME .
            - docker push $IMAGE_NAME
            # Add jasypt pw to container definition
            - jq '.[].environment += [{"name":"JASYPT_ENCRYPTOR_PASSWORD", "value":"'$ENC_PW_TEST'"}]' container-definitions_test_stu3.json > tmp.json && mv tmp.json container-definitions_test_stu3.json
            - jq '.[].environment += [{"name":"JASYPT_ENCRYPTOR_PASSWORD", "value":"'$ENC_PW_TEST'"}]' container-definitions_test_dstu2.json > tmp.json && mv tmp.json container-definitions_test_dstu2.json
            # For stu3 profile
            # register the ECS task definition and capture the version
            - export NEW_CONTAINER_NAME=$(cat container-definitions_test_stu3.json | jq --raw-output '.[0].name')
            - export TASK_VERSION=$(aws ecs register-task-definition --family $NEW_CONTAINER_NAME --volumes name=indexes,host={sourcePath=/var/ecs/indexes} --container-definitions $(cat container-definitions_test_stu3.json | jq -c '.')  | jq --raw-output '.taskDefinition.revision')
            # update the service to use the latest task definition
            - aws ecs update-service --cluster $TARGET_AWS_CLUSTER --service $TARGET_AWS_SERVICE_STU3 --task-definition $NEW_CONTAINER_NAME:$TASK_VERSION
            # for dstu2 profile
            # register the ECS task definition and capture the version
            - export NEW_CONTAINER_NAME=$(cat container-definitions_test_dstu2.json | jq --raw-output '.[0].name')
            - export TASK_VERSION=$(aws ecs register-task-definition --family $NEW_CONTAINER_NAME --volumes name=indexes,host={sourcePath=/var/ecs/indexes_dstu2} --container-definitions $(cat container-definitions_test_dstu2.json | jq -c '.')  | jq --raw-output '.taskDefinition.revision')
            # update the service to use the latest task definition
            - aws ecs update-service --cluster hspc-test --service $TARGET_AWS_SERVICE_DSTU2 --task-definition $NEW_CONTAINER_NAME:$TASK_VERSION
    feature/*:
      - step:
          caches:
            - maven
          script:
            - mvn -B verify
    release/*:
      - step:
          caches:
            - maven
          script:
            - mvn -B verify
    hotfix/*:
      - step:
          caches:
            - maven
          script:
            - mvn -B verify
    master:
      - step:
          script:
            # Deploy to maven central
            - openssl aes-256-cbc -pass pass:$OPENSSL_PWD -in private-key.gpg.enc -out private-key.gpg -d
            - gpg --batch --import private-key.gpg
            - mvn -V -B -s settings.xml deploy -P DEPLOY,ossrh
            # clear out the other jar files
            - rm reference-api-fhir/target/*-sources.jar
            - rm reference-api-fhir/target/*-javadoc.jar
            - rm reference-api-mysql/target/*-sources.jar
            - rm reference-api-mysql/target/*-javadoc.jar
            - rm reference-api-mysql-multitenant/target/*-sources.jar
            - rm reference-api-mysql-multitenant/target/*-javadoc.jar
            - rm reference-api-oauth2/target/*-sources.jar
            - rm reference-api-oauth2/target/*-javadoc.jar
            - rm reference-api-smart-support/target/*-sources.jar
            - rm reference-api-smart-support/target/*-javadoc.jar
            - rm reference-api-webapp/target/*-sources.jar
            - rm reference-api-webapp/target/*-javadoc.jar
            - rm reference-api-webapp-base/target/*-sources.jar
            - rm reference-api-webapp-base/target/*-javadoc.jar
            - rm reference-api-webapp-multitenant/target/*-sources.jar
            - rm reference-api-webapp-multitenant/target/*-javadoc.jar
            # build dynamic container-definitions
            - export CONTAINER_NAME=$(mvn -q -Dexec.executable="echo" -Dexec.args='${project.artifactId}' --non-recursive exec:exec)
            - export PROJECT_VERSION=$(mvn -q -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive exec:exec)
            - sed -i -e "s/{{CONTAINER_NAME}}/$CONTAINER_NAME/g" -e "s/{{PROJECT_VERSION}}/$PROJECT_VERSION/g" container-definitions_prod_stu3.json
            - sed -i -e "s/{{CONTAINER_NAME}}/$CONTAINER_NAME/g" -e "s/{{PROJECT_VERSION}}/$PROJECT_VERSION/g" container-definitions_prod_dstu2.json
            # build docker image and push to nexus.hspconsortium.com:18083 for dstu2 profile
            - export IMAGE_NAME=$(cat container-definitions_prod_dstu2.json | jq --raw-output '.[0].image')
            - docker login -u $NEXUS_USR -p $NEXUS_PWD nexus.hspconsortium.org:18083
            - docker build -t $IMAGE_NAME .
            - docker push $IMAGE_NAME
            # Add jasypt pw to container definition
            - jq '.[].environment += [{"name":"JASYPT_ENCRYPTOR_PASSWORD", "value":"'$ENC_PW_PROD'"}]' container-definitions_prod_stu3.json > tmp.json && mv tmp.json container-definitions_prod_stu3.json
            - jq '.[].environment += [{"name":"JASYPT_ENCRYPTOR_PASSWORD", "value":"'$ENC_PW_PROD'"}]' container-definitions_prod_dstu2.json > tmp.json && mv tmp.json container-definitions_prod_dstu2.json
            # For stu3 profile
            # register the ECS task definition and capture the version
            - export NEW_CONTAINER_NAME=$(cat container-definitions_prod_stu3.json | jq --raw-output '.[0].name')
            - export TASK_VERSION=$(aws ecs register-task-definition --family $NEW_CONTAINER_NAME --volumes name=indexes,host={sourcePath=/var/ecs/indexes} --container-definitions $(cat container-definitions_prod_stu3.json | jq -c '.')  | jq --raw-output '.taskDefinition.revision')
            # for dstu2 profile
            # register the ECS task definition and capture the version
            - export NEW_CONTAINER_NAME=$(cat container-definitions_prod_dstu2.json | jq --raw-output '.[0].name')
            - export TASK_VERSION=$(aws ecs register-task-definition --family $NEW_CONTAINER_NAME --volumes name=indexes,host={sourcePath=/var/ecs/indexes_dstu2} --container-definitions $(cat container-definitions_prod_dstu2.json | jq -c '.')  | jq --raw-output '.taskDefinition.revision')
options:
  docker: true

definitions:
  caches:
    resources: reference-api-webapp-base/src/main/resources/db